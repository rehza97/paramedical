"""Add speciality_id to services table

Revision ID: 5612685bd9df
Revises: 9bd470368e34
Create Date: 2025-07-07 04:50:30.042414

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '5612685bd9df'
down_revision = '9bd470368e34'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Step 1: Add the column as nullable first
    op.add_column('services', sa.Column('speciality_id',
                  sa.String(length=36), nullable=True))

    # Step 2: Update existing services to link to the first speciality
    # This is a data migration - in production you'd want to map services to appropriate specialities
    connection = op.get_bind()

    # Get the first speciality ID
    result = connection.execute(sa.text("SELECT id FROM specialities LIMIT 1"))
    first_speciality_id = result.scalar()

    if first_speciality_id:
        # Update all existing services to use the first speciality
        connection.execute(
            sa.text(
                "UPDATE services SET speciality_id = :speciality_id WHERE speciality_id IS NULL"),
            {"speciality_id": first_speciality_id}
        )

    # Step 3: Make the column NOT NULL
    op.alter_column('services', 'speciality_id', nullable=False)

    # Step 4: Add the foreign key constraint
    op.create_foreign_key(None, 'services', 'specialities', [
                          'speciality_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'services', type_='foreignkey')
    op.drop_column('services', 'speciality_id')
    # ### end Alembic commands ###
